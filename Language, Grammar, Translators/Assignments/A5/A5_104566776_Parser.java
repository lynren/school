
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A5_104566776_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return A5_104566776_Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public A5_104566776_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A5_104566776_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A5_104566776_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\026\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\006\000\002\004\010\000\002\004\011\000" +
    "\002\004\010\000\002\004\007\000\002\004\010\000\002" +
    "\005\005\000\002\005\003\000\002\006\004\000\002\006" +
    "\003\000\002\007\005\000\002\027\003\000\002\027\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\030\010\000\002\030" +
    "\011\000\002\030\005\000\002\031\010\000\002\011\005" +
    "\000\002\011\006\000\002\011\004\000\002\011\004\000" +
    "\002\011\005\000\002\012\006\000\002\012\007\000\002" +
    "\012\006\000\002\012\006\000\002\012\005\000\002\012" +
    "\005\000\002\013\005\000\002\020\007\000\002\020\006" +
    "\000\002\024\004\000\002\024\005\000\002\021\007\000" +
    "\002\021\011\000\002\021\007\000\002\022\012\000\002" +
    "\022\011\000\002\022\007\000\002\014\003\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\023\005\000\002\023\005\000\002\015\003\000" +
    "\002\016\005\000\002\016\006\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\005\000\002\017\003\000\002\025\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\005\010\006\011\001\002\000\010\002" +
    "\ufffe\005\010\006\011\001\002\000\004\002\001\001\002" +
    "\000\004\002\245\001\002\000\006\010\013\034\012\001" +
    "\002\000\012\010\ufffc\022\ufffc\024\ufffc\034\ufffc\001\002" +
    "\000\012\010\ufffd\022\ufffd\024\ufffd\034\ufffd\001\002\000" +
    "\004\023\237\001\002\000\010\023\015\024\016\034\014" +
    "\001\002\000\004\023\231\001\002\000\006\005\010\006" +
    "\011\001\002\000\004\025\017\001\002\000\034\005\010" +
    "\006\011\007\030\011\032\013\045\014\026\025\017\032" +
    "\034\034\035\041\037\043\031\044\041\046\044\001\002" +
    "\000\010\002\ufffb\005\ufffb\006\ufffb\001\002\000\044\005" +
    "\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\025\uffe8\026\uffe8\032\uffe8\034\uffe8\041\uffe8\043\uffe8\044" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\001\002\000\044\005\010" +
    "\006\011\007\030\011\032\012\ufff0\013\045\014\026\025" +
    "\017\026\ufff0\032\034\034\035\041\037\043\031\044\041" +
    "\046\044\047\ufff0\050\ufff0\001\002\000\044\005\uffe7\006" +
    "\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\025\uffe7" +
    "\026\uffe7\032\uffe7\034\uffe7\041\uffe7\043\uffe7\044\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\001\002\000\044\005\uffe9\006\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\025\uffe9\026" +
    "\uffe9\032\uffe9\034\uffe9\041\uffe9\043\uffe9\044\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\001\002\000\004\034\213\001\002\000" +
    "\004\023\207\001\002\000\044\005\uffea\006\uffea\007\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\025\uffea\026\uffea\032" +
    "\uffea\034\uffea\041\uffea\043\uffea\044\uffea\046\uffea\047\uffea" +
    "\050\uffea\001\002\000\014\004\057\023\056\034\051\035" +
    "\052\040\060\001\002\000\004\023\201\001\002\000\004" +
    "\023\173\001\002\000\044\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\025\uffee\026\uffee\032\uffee" +
    "\034\uffee\041\uffee\043\uffee\044\uffee\046\uffee\047\uffee\050" +
    "\uffee\001\002\000\004\035\162\001\002\000\014\015\116" +
    "\020\120\021\157\022\156\027\117\001\002\000\044\005" +
    "\uffed\006\uffed\007\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\025\uffed\026\uffed\032\uffed\034\uffed\041\uffed\043\uffed\044" +
    "\uffed\046\uffed\047\uffed\050\uffed\001\002\000\034\005\010" +
    "\006\011\007\030\011\032\013\045\014\026\025\017\032" +
    "\034\034\035\041\037\043\031\044\041\046\044\001\002" +
    "\000\044\005\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\025\uffeb\026\uffeb\032\uffeb\034\uffeb\041\uffeb" +
    "\043\uffeb\044\uffeb\046\uffeb\047\uffeb\050\uffeb\001\002\000" +
    "\014\004\057\023\056\034\051\035\052\040\060\001\002" +
    "\000\044\005\uffec\006\uffec\007\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\025\uffec\026\uffec\032\uffec\034\uffec\041\uffec" +
    "\043\uffec\044\uffec\046\uffec\047\uffec\050\uffec\001\002\000" +
    "\004\026\133\001\002\000\004\045\131\001\002\000\004" +
    "\023\046\001\002\000\004\034\047\001\002\000\010\015" +
    "\116\020\120\027\117\001\002\000\014\004\057\023\056" +
    "\034\051\035\052\040\060\001\002\000\032\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\112\024\uffbe" +
    "\030\uffbe\031\uffbe\042\uffbe\045\uffbe\001\002\000\030\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0" +
    "\030\uffc0\031\uffc0\042\uffc0\045\uffc0\001\002\000\006\030" +
    "\106\031\107\001\002\000\004\021\102\001\002\000\030" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024" +
    "\uffc5\030\uffc5\031\uffc5\042\uffc5\045\uffc5\001\002\000\014" +
    "\004\057\023\056\034\051\035\052\040\060\001\002\000" +
    "\030\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\024\uffbf\030\uffbf\031\uffbf\042\uffbf\045\uffbf\001\002\000" +
    "\014\004\057\023\056\034\051\035\052\040\060\001\002" +
    "\000\024\015\070\016\073\017\072\020\071\021\uffcc\022" +
    "\uffcc\024\uffcc\042\uffcc\045\uffcc\001\002\000\010\022\066" +
    "\024\uffbc\042\uffbc\001\002\000\004\042\065\001\002\000" +
    "\030\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\024\uffc4\030\uffc4\031\uffc4\042\uffc4\045\uffc4\001\002\000" +
    "\030\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\024\uffbb\030\uffbb\031\uffbb\042\uffbb\045\uffbb\001\002\000" +
    "\014\004\057\023\056\034\051\035\052\040\060\001\002" +
    "\000\006\024\uffbd\042\uffbd\001\002\000\014\004\057\023" +
    "\056\034\051\035\052\040\060\001\002\000\014\004\057" +
    "\023\056\034\051\035\052\040\060\001\002\000\014\004" +
    "\057\023\056\034\051\035\052\040\060\001\002\000\014" +
    "\004\057\023\056\034\051\035\052\040\060\001\002\000" +
    "\014\021\uffc9\022\uffc9\024\uffc9\042\uffc9\045\uffc9\001\002" +
    "\000\014\021\uffc8\022\uffc8\024\uffc8\042\uffc8\045\uffc8\001" +
    "\002\000\014\021\uffca\022\uffca\024\uffca\042\uffca\045\uffca" +
    "\001\002\000\014\021\uffcb\022\uffcb\024\uffcb\042\uffcb\045" +
    "\uffcb\001\002\000\004\024\101\001\002\000\030\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\030" +
    "\uffc2\031\uffc2\042\uffc2\045\uffc2\001\002\000\004\034\047" +
    "\001\002\000\004\024\104\001\002\000\034\005\010\006" +
    "\011\007\030\011\032\013\045\014\026\025\017\032\034" +
    "\034\035\041\037\043\031\044\041\046\044\001\002\000" +
    "\044\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\025\uffcf\026\uffcf\032\uffcf\034\uffcf\041\uffcf\043" +
    "\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000\014" +
    "\004\057\023\056\034\051\035\052\040\060\001\002\000" +
    "\014\004\057\023\056\034\051\035\052\040\060\001\002" +
    "\000\006\021\uffc6\024\uffc6\001\002\000\006\021\uffc7\024" +
    "\uffc7\001\002\000\016\004\057\023\056\024\113\034\051" +
    "\035\052\040\060\001\002\000\030\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\030\uffc1\031\uffc1" +
    "\042\uffc1\045\uffc1\001\002\000\004\024\115\001\002\000" +
    "\030\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\024\uffc3\030\uffc3\031\uffc3\042\uffc3\045\uffc3\001\002\000" +
    "\004\015\127\001\002\000\014\004\057\023\056\034\051" +
    "\035\052\040\060\001\002\000\004\020\121\001\002\000" +
    "\060\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\021\122\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\032\uffd8\034\uffd8\035\uffd8\040\uffd8\041\uffd8\043\uffd8" +
    "\044\uffd8\046\uffd8\047\uffd8\050\uffd8\001\002\000\056\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\023\uffda\024\uffda\025\uffda\026\uffda\032\uffda\034" +
    "\uffda\035\uffda\040\uffda\041\uffda\043\uffda\044\uffda\046\uffda" +
    "\047\uffda\050\uffda\001\002\000\006\021\125\022\124\001" +
    "\002\000\004\034\047\001\002\000\056\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\032\uffdd\034\uffdd\035\uffdd" +
    "\040\uffdd\041\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\001\002\000\056\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\032\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc" +
    "\043\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\001\002\000" +
    "\060\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\021\130\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\032\uffd9\034\uffd9\035\uffd9\040\uffd9\041\uffd9\043\uffd9" +
    "\044\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002\000\056\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\032\uffdb\034" +
    "\uffdb\035\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\001\002\000\034\005\010\006\011\007" +
    "\030\011\032\013\045\014\026\025\017\032\034\034\035" +
    "\041\037\043\031\044\041\046\044\001\002\000\044\005" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\025\uffe4\026\uffe4\032\uffe4\034\uffe4\041\uffe4\043\uffe4\044" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\001\002\000\046\002\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\025\ufff1\026\ufff1\032\ufff1\034\ufff1\041\ufff1\043\ufff1" +
    "\044\ufff1\046\ufff1\047\ufff1\050\ufff1\001\002\000\004\045" +
    "\135\001\002\000\034\005\010\006\011\007\030\011\032" +
    "\013\045\014\026\025\017\032\034\034\035\041\037\043" +
    "\031\044\041\046\044\001\002\000\004\047\137\001\002" +
    "\000\004\021\140\001\002\000\044\005\uffe6\006\uffe6\007" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\025\uffe6\026\uffe6" +
    "\032\uffe6\034\uffe6\041\uffe6\043\uffe6\044\142\046\uffe6\047" +
    "\uffe6\050\uffe6\001\002\000\044\005\uffe5\006\uffe5\007\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\025\uffe5\026\uffe5\032" +
    "\uffe5\034\uffe5\041\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\001\002\000\014\004\057\023\056\034\051\035" +
    "\052\040\060\001\002\000\004\045\144\001\002\000\034" +
    "\005\010\006\011\007\030\011\032\013\045\014\026\025" +
    "\017\032\034\034\035\041\037\043\031\044\041\046\044" +
    "\001\002\000\004\047\146\001\002\000\004\021\147\001" +
    "\002\000\044\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\025\uffe3\026\uffe3\032\uffe3\034\uffe3\041" +
    "\uffe3\043\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\001\002" +
    "\000\004\050\151\001\002\000\004\023\152\001\002\000" +
    "\014\004\057\023\056\034\051\035\052\040\060\001\002" +
    "\000\004\024\154\001\002\000\004\021\155\001\002\000" +
    "\044\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\025\uffce\026\uffce\032\uffce\034\uffce\041\uffce\043" +
    "\uffce\044\uffce\046\uffce\047\uffce\050\uffce\001\002\000\010" +
    "\005\010\006\011\034\160\001\002\000\044\005\uffdf\006" +
    "\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\025\uffdf" +
    "\026\uffdf\032\uffdf\034\uffdf\041\uffdf\043\uffdf\044\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\001\002\000\006\021\157\022\156" +
    "\001\002\000\044\005\uffde\006\uffde\007\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\025\uffde\026\uffde\032\uffde\034\uffde" +
    "\041\uffde\043\uffde\044\uffde\046\uffde\047\uffde\050\uffde\001" +
    "\002\000\006\022\163\024\165\001\002\000\014\004\057" +
    "\023\056\034\051\035\052\040\060\001\002\000\004\024" +
    "\167\001\002\000\004\021\166\001\002\000\044\005\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\025" +
    "\uffd5\026\uffd5\032\uffd5\034\uffd5\041\uffd5\043\uffd5\044\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\001\002\000\004\021\170\001" +
    "\002\000\044\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\025\uffd6\026\uffd6\032\uffd6\034\uffd6\041" +
    "\uffd6\043\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\001\002" +
    "\000\006\022\163\024\uffd4\001\002\000\004\024\uffd3\001" +
    "\002\000\014\004\057\023\056\034\051\035\052\040\060" +
    "\001\002\000\004\024\175\001\002\000\034\005\010\006" +
    "\011\007\030\011\032\013\045\014\026\025\017\032\034" +
    "\034\035\041\037\043\031\044\041\046\044\001\002\000" +
    "\044\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012\177\013\uffd2" +
    "\014\uffd2\025\uffd2\026\uffd2\032\uffd2\034\uffd2\041\uffd2\043" +
    "\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\001\002\000\034" +
    "\005\010\006\011\007\030\011\032\013\045\014\026\025" +
    "\017\032\034\034\035\041\037\043\031\044\041\046\044" +
    "\001\002\000\044\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\025\uffd1\026\uffd1\032\uffd1\034\uffd1" +
    "\041\uffd1\043\uffd1\044\uffd1\046\uffd1\047\uffd1\050\uffd1\001" +
    "\002\000\014\004\057\023\056\034\051\035\052\040\060" +
    "\001\002\000\004\024\203\001\002\000\034\005\010\006" +
    "\011\007\030\011\032\013\045\014\026\025\017\032\034" +
    "\034\035\041\037\043\031\044\041\046\044\001\002\000" +
    "\044\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\025\uffd0\026\uffd0\032\uffd0\034\uffd0\041\uffd0\043" +
    "\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002\000\004" +
    "\021\206\001\002\000\044\005\uffd7\006\uffd7\007\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\025\uffd7\026\uffd7\032\uffd7" +
    "\034\uffd7\041\uffd7\043\uffd7\044\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\001\002\000\014\004\057\023\056\034\051\035\052" +
    "\040\060\001\002\000\004\024\211\001\002\000\034\005" +
    "\010\006\011\007\030\011\032\013\045\014\026\025\017" +
    "\032\034\034\035\041\037\043\031\044\041\046\044\001" +
    "\002\000\044\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\025\uffcd\026\uffcd\032\uffcd\034\uffcd\041" +
    "\uffcd\043\uffcd\044\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002" +
    "\000\014\015\116\020\120\021\216\022\215\027\117\001" +
    "\002\000\044\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\025\uffe0\026\uffe0\032\uffe0\034\uffe0\041" +
    "\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\001\002" +
    "\000\010\005\010\006\011\034\160\001\002\000\044\005" +
    "\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\025\uffe2\026\uffe2\032\uffe2\034\uffe2\041\uffe2\043\uffe2\044" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\001\002\000\044\005\uffe1" +
    "\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\025" +
    "\uffe1\026\uffe1\032\uffe1\034\uffe1\041\uffe1\043\uffe1\044\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\001\002\000\044\005\uffef\006" +
    "\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\025\uffef" +
    "\026\uffef\032\uffef\034\uffef\041\uffef\043\uffef\044\uffef\046" +
    "\uffef\047\uffef\050\uffef\001\002\000\010\022\ufff2\024\ufff2" +
    "\034\230\001\002\000\004\024\226\001\002\000\006\022" +
    "\224\024\ufff4\001\002\000\006\005\010\006\011\001\002" +
    "\000\004\024\ufff5\001\002\000\004\025\017\001\002\000" +
    "\010\002\ufffa\005\ufffa\006\ufffa\001\002\000\006\022\ufff3" +
    "\024\ufff3\001\002\000\010\005\010\006\011\024\233\001" +
    "\002\000\004\024\235\001\002\000\004\025\017\001\002" +
    "\000\010\002\ufff8\005\ufff8\006\ufff8\001\002\000\004\025" +
    "\017\001\002\000\010\002\ufff9\005\ufff9\006\ufff9\001\002" +
    "\000\010\005\010\006\011\024\241\001\002\000\004\024" +
    "\243\001\002\000\004\025\017\001\002\000\010\002\ufff7" +
    "\005\ufff7\006\ufff7\001\002\000\004\025\017\001\002\000" +
    "\010\002\ufff6\005\ufff6\006\ufff6\001\002\000\004\002\000" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\012\002\004\003\006\004\003\026\005\001" +
    "\001\000\010\002\245\003\006\004\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\220\005\221\006\222\001" +
    "\001\000\004\007\017\001\001\000\030\003\024\007\032" +
    "\010\021\011\035\012\041\013\037\020\026\021\023\022" +
    "\020\027\042\030\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\024\007\032\010\021\011\035\012" +
    "\041\013\037\020\026\021\023\022\020\027\217\030\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\204\015\060\016\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\024\007\032\010" +
    "\021\011\035\012\041\013\037\020\026\021\023\022\020" +
    "\027\147\030\022\001\001\000\002\001\001\000\010\014" +
    "\133\015\060\016\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\047\001\001\000\002\001\001\000\010\015\052\016\054" +
    "\023\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\077\015\060\016\054\001\001\000\002\001\001\000" +
    "\012\014\061\015\060\016\054\017\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\061\015\060" +
    "\016\054\017\066\001\001\000\002\001\001\000\010\014" +
    "\076\015\060\016\054\001\001\000\010\014\075\015\060" +
    "\016\054\001\001\000\010\014\074\015\060\016\054\001" +
    "\001\000\010\014\073\015\060\016\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\102" +
    "\001\001\000\002\001\001\000\030\003\024\007\032\010" +
    "\021\011\035\012\041\013\037\020\026\021\023\022\020" +
    "\027\104\030\022\001\001\000\002\001\001\000\006\015" +
    "\110\016\054\001\001\000\006\015\107\016\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\061\015" +
    "\060\016\054\017\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\122\015\060\016\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\024\007\032\010" +
    "\021\011\035\012\041\013\037\020\026\021\023\022\020" +
    "\027\131\030\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\024\007\032\010\021" +
    "\011\035\012\041\013\037\020\026\021\023\022\020\027" +
    "\135\030\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\140\001\001\000\002\001\001\000\010\014" +
    "\142\015\060\016\054\001\001\000\002\001\001\000\030" +
    "\003\024\007\032\010\021\011\035\012\041\013\037\020" +
    "\026\021\023\022\020\027\144\030\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\052\016\054\023\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\024\011\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\163\001" +
    "\001\000\010\014\170\015\060\016\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\171\001\001\000\002" +
    "\001\001\000\010\015\052\016\054\023\173\001\001\000" +
    "\002\001\001\000\030\003\024\007\032\010\021\011\035" +
    "\012\041\013\037\020\026\021\023\022\020\027\175\030" +
    "\022\001\001\000\002\001\001\000\030\003\024\007\032" +
    "\010\021\011\035\012\041\013\037\020\026\021\023\022" +
    "\020\027\177\030\022\001\001\000\002\001\001\000\010" +
    "\014\201\015\060\016\054\001\001\000\002\001\001\000" +
    "\030\003\024\007\032\010\021\011\035\012\041\013\037" +
    "\020\026\021\023\022\020\027\203\030\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\052\016\054\023\207\001\001\000\002\001\001\000" +
    "\030\003\024\007\032\010\021\011\035\012\041\013\037" +
    "\020\026\021\023\022\020\027\211\030\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\024\011\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\220\005\224\006\222\001" +
    "\001\000\002\001\001\000\004\007\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\220\005\231\006" +
    "\222\001\001\000\002\001\001\000\004\007\233\001\001" +
    "\000\002\001\001\000\004\007\235\001\001\000\002\001" +
    "\001\000\010\003\220\005\237\006\222\001\001\000\002" +
    "\001\001\000\004\007\241\001\001\000\002\001\001\000" +
    "\004\007\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A5_104566776_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A5_104566776_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A5_104566776_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A5_104566776_Parser$actions {
  private final A5_104566776_Parser parser;

  /** Constructor */
  CUP$A5_104566776_Parser$actions(A5_104566776_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A5_104566776_Parser$do_action_part00000000(
    int                        CUP$A5_104566776_Parser$act_num,
    java_cup.runtime.lr_parser CUP$A5_104566776_Parser$parser,
    java.util.Stack            CUP$A5_104566776_Parser$stack,
    int                        CUP$A5_104566776_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A5_104566776_Parser$result;

      /* select the action based on the action number */
      switch (CUP$A5_104566776_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // full ::= program 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT = ("public class A5 {\n"+e+"\n}"); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("full",20, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= full EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		RESULT = start_val;
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A5_104566776_Parser$parser.done_parsing();
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= methodDecl program 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= e+ "\n" + e2;
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= methodDecl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= e;
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= INT 
            {
              String RESULT =null;
		 RESULT= ("int "); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= VOID 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methodDecl ::= type MAIN RPAR block 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methodDecl ::= type MAIN LPAR formalParams RPAR block 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= ("\tpublic static void main(String [] args)\n" + b); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methodDecl ::= type MAIN ID LPAR formalParams RPAR block 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methodDecl ::= type MAIN ID LPAR RPAR block 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methodDecl ::= type ID LPAR RPAR block 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT=("public static "+t+" "+m+"("+")"+b);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methodDecl ::= type ID LPAR formalParams RPAR block 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT=("public static "+t+" "+m+"("+fp+")"+b);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formalParams ::= formalParam COMMA formalParams 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String fps = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (fp +", "+fps); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("formalParams",3, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formalParams ::= formalParam 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (fp); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("formalParams",3, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalParam ::= type ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (t +" "+i); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("formalParam",4, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalParam ::= type 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("formalParam",4, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block ::= LBRA statements RBRA 
            {
              String RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String sts = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		 RESULT= ("{\n"+ sts+"\n}"); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements ::= statement 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (s); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statements",21, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= statement statements 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String sts = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (s + " " + sts); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statements",21, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= block 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (b+"\n"); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= localVarDecl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (e+"\n"); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= assignStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= returnStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (e);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= printStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= condStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT=(e);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= iteration 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT=(e);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= labeled_statements 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT=(e);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // labeled_statements ::= CASE expression COLON statements BREAK SEMI 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		 RESULT= ("case "+e+":"+s+"break;");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("labeled_statements",22, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // labeled_statements ::= CASE expression COLON statements BREAK SEMI labeled_statement 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= ("case "+e+":"+s+"break;"+ls);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("labeled_statements",22, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // labeled_statements ::= DEFAULT COLON statements 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT=("default: "+s);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("labeled_statements",22, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // labeled_statement ::= CASE expression COLON statements BREAK SEMI 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		RESULT=("case "+e+":"+s+"break;\n");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",23, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // localVarDecl ::= type ID SEMI 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		 RESULT= (t + " " +i+ ";"); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // localVarDecl ::= type ID COMMA localVarDecl 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String lv = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (t + " " + i+ ", " +lv); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // localVarDecl ::= type assignStmt 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (t + " " + a);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // localVarDecl ::= ID SEMI 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // localVarDecl ::= ID COMMA localVarDecl 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignStmt ::= ID EQUAL expression SEMI 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		 RESULT= (i+" = "+e+";"); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",8, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignStmt ::= ID EQUAL expression COMMA assignStmt 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (i+" = "+e+", " +as); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",8, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignStmt ::= ID PLUS PLUS SEMI 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).value;
		RESULT = (i+"++;");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",8, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignStmt ::= ID MINUS MINUS SEMI 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).value;
		RESULT=(i+"--;");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",8, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignStmt ::= ID PLUS PLUS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		RESULT=(i+"++");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",8, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignStmt ::= ID MINUS MINUS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		RESULT=(i+"--");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",8, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // returnStmt ::= RETURN expression SEMI 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		RESULT= ("return "+e+";");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("returnStmt",9, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // printStmt ::= PRINTF QUOTES printIDs RPAR SEMI 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		 RESULT= ("System.out.printf("+q+i+");"); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("printStmt",14, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // printStmt ::= PRINTF QUOTES RPAR SEMI 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		RESULT=("System.out.printf("+q+");");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("printStmt",14, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // printIDs ::= COMMA expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT = ","+e; 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("printIDs",18, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // printIDs ::= COMMA expression printIDs 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT = ","+e+e2; 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("printIDs",18, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condStmt ::= IF LPAR condExpr RPAR statements 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String sts = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT=("if("+e+")"+sts) ;
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("condStmt",15, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condStmt ::= IF LPAR condExpr RPAR statements ELSE statements 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String sts = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int sts2left = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int sts2right = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String sts2 = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT=("if("+e+")"+sts+"\nelse"+sts2); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("condStmt",15, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condStmt ::= SWITCH LPAR expression RPAR statements 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT=("switch ("+e+")"+s);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("condStmt",15, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // iteration ::= FOR LPAR assignStmt condExpr SEMI assignStmt RPAR statements 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT=("for("+a+e+";"+a2+")"+s);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("iteration",16, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-7)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // iteration ::= DO statements WHILECOND LPAR condExpr RPAR SEMI 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		 RESULT=("do\n"+s+"while("+c+");");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("iteration",16, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // iteration ::= WHILE LPAR condExpr RPAR statements 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT=("while("+c+")"+s); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("iteration",16, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= multiplicativeExpr 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (me);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= multiplicativeExpr PLUS expression 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (me+"+"+e);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= multiplicativeExpr MINUS expression 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (me+"-"+e);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= multiplicativeExpr TIMES expression 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (me+"*"+e);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= multiplicativeExpr DIVIDE expression 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT = (me+"/"+e);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condExpr ::= multiplicativeExpr GREATER multiplicativeExpr 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int me2left = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int me2right = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String me2 = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT = (me+">"+me2);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("condExpr",17, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condExpr ::= multiplicativeExpr LESS multiplicativeExpr 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int me2left = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int me2right = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String me2 = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT = (me+"<"+me2);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("condExpr",17, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // multiplicativeExpr ::= primaryExpr 
            {
              String RESULT =null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String pe1 = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (pe1);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpr",11, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primaryExpr ::= METHOD actualParams paramErr 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // primaryExpr ::= ID LPAR actualParams RPAR 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		 RESULT=(m+"("+a+")");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // primaryExpr ::= LPAR expression RPAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-1)).value;
		RESULT= ("("+e+")");
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // primaryExpr ::= ID LPAR RPAR 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primaryExpr ::= QUOTES 
            {
              String RESULT =null;

              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primaryExpr ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= n; 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primaryExpr ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		 RESULT= (i); 
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // actualParams ::= expression COMMA actualParams 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (e +", " +ap);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("actualParams",13, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.elementAt(CUP$A5_104566776_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // actualParams ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104566776_Parser$stack.peek()).value;
		RESULT= (e);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("actualParams",13, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paramErr ::= METHODERR 
            {
              String RESULT =null;
		 System.out.println("Syntax error\nIncorrect method parameters");System.exit(0);
              CUP$A5_104566776_Parser$result = parser.getSymbolFactory().newSymbol("paramErr",19, ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104566776_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104566776_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A5_104566776_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A5_104566776_Parser$do_action(
    int                        CUP$A5_104566776_Parser$act_num,
    java_cup.runtime.lr_parser CUP$A5_104566776_Parser$parser,
    java.util.Stack            CUP$A5_104566776_Parser$stack,
    int                        CUP$A5_104566776_Parser$top)
    throws java.lang.Exception
    {
              return CUP$A5_104566776_Parser$do_action_part00000000(
                               CUP$A5_104566776_Parser$act_num,
                               CUP$A5_104566776_Parser$parser,
                               CUP$A5_104566776_Parser$stack,
                               CUP$A5_104566776_Parser$top);
    }
}

}
