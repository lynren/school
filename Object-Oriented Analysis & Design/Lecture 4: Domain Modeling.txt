Lecture 4: Domain Modeling

1 DOMAIN MODELING
	DOMAIN MODEL
	-illustrates conceptual classes and diagram(s)
	-domain model is not a class diagram
	-springboard for designing software objects

	CONCEPTUAL CLASSES
	-ideas, things, or objects in the real world
		-symbol:	represented by words or images
		-intension:	described by definitions
		-extension:	explained with examples
	-may or may not map to software classes

	IDENTIFYING CONCEPTUAL CLASSES (I)
	-candidates in common categories
		-tangible objects, business concepts, people, places, processes, etc
	-maintain context of the domain
		-use existing name if a concept has one
		-dont include concepts outside the domain, dont be over specific

	IDENTIFYING CONCEPTUAL CLASSES (II)
	-Identify nouns in the use case descriptions

	DESCRIPTION CONCEPTUAL CLASSES
	-attributes vs description conceptual classes
		-sometimes necessary to separate the description of a concept from the concept itself

	OBJECTS vs ATTRIBUTES
		-object is an instance of a class
		-attributes usually associated with data types

	ASSOCIATIONS OF CONCEPTUAL CLASSES
	-associations indicate relationships
	-domain model includes important relationships
	-each association has:
		-short text label
		-indicate the direction of relationship with an arrow
		-use multipliers to provide quantity informations

	IDENTIFYING ASSOCIATION AND MULTIPLICITY
	-identify associations by listing each conceptual class and relate it to others
	-multiplicity shows the quantity of instances b/w class at a particular point in time

	MULTIPLE AND REFLEXIVE ASSOCIATIONS
	-two conceptual classes can have multiple associations
	-a conceptual class can associate with itself
	-it is better to add new conceptual classes to domain model

	COMPOSITION
	-object of ClassA relies on object of ClassB to exist

	AGGREGATION
	-an object of classA/B may exist without the other

2 SYSTEM SEQUENCE DIAGRAM (SSD)
	-uses a UML sequence diagram to show events crossing system's boundary from actors to system
	-illustrates the events generated by external actors and their order in a time sequence
	-diagram shows one particular scenario of a use case
	-whole system is treated as a black box

	-supplementary to use case descriptions
	-help to identify system events and major operations
	-not nececssary to create SSDs for all scenarios of all use cases

	CONSTRUCT AN SSD FROM A USE CASE
	-four steps:
		-draw system as a black box on the right side
		-draw a stick figure and a line for each actor that directly interacts w/ the system
		-draw a message for each system event generated by an actor in the use case
		-optionally, include use case test to the left of the diagram
	-identify the actor
		-must be an actor who directly interacts w/ the system
		-actor generates system events
	-use adequate names for system events/operations
		-start operation names with verb (from use case)
		-name system events and associated operations at the level of intent

	OPERATION CONTRACTS
	-System operations
		-they are operations offered by the system in its public interface as a black box comp.
		-they are defined by operation contracts
	-format:
		OPERATION: name of op and params
		CROSS REFERENCE: use cases this op can occur within
		PRECONDITIONS:
		POSTCONDITIONS: state of objects in domain model after completion of op

REMARKS on OOA Artifacts
-use cases and use case diagrams
	-cluttered relationships are hard to read
	-better to spent time in use case descriptions

-domain model
	-all models are only approx. of the domain. Focus on communication
	-a useful domain model:
		-capture essential abstractions and info required to understand the domain
		-aid people in understanding terms, concepts, and relationships in the domain